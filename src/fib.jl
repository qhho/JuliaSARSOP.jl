#=
NOTE: With default utility initialization not already an upper bound on value,
if too few iterations are run, the calculated upper value may not actually be
an upper bound on the value.

Same applies to using QMDP as an upper bound, but provided that the upper bound is
used (relative to lower bound) to guide search as well as determining convergence
the detriment to the final policy may be minor.
=#
struct FastInformedBound
    max_iter::Int
    max_time::Float64
    init_value::Float64
    Œ±_tmp::Vector{Float64}
    FastInformedBound(n; init_value=0., max_time=Inf) = new(n, max_time, init_value, Float64[])
end

function update!(ùí´::POMDP, M::FastInformedBound, Œì, ùíÆ, ùíú, ùí™)
    Œ≥ = discount(ùí´)

    for (a_idx, a) ‚àà enumerate(ùíú)
        Œ±_a = M.Œ±_tmp
        for (s_idx, s) ‚àà enumerate(ùíÆ)
            T = transition(ùí´, s, a)
            tmp = 0.0
            for o ‚àà ùí™
                Vmax = -Inf
                for Œ±‚Ä≤ ‚àà Œì
                    Vb‚Ä≤ = 0.0
                    for (sp_idx, sp) ‚àà enumerate(ùíÆ)
                        Oprob = pdf(observation(ùí´, s, a, sp), o)
                        Tprob = pdf(T, sp)
                        @inbounds Vb‚Ä≤ += Oprob*Tprob*Œ±‚Ä≤[sp_idx]
                    end
                    Vb‚Ä≤ > Vmax && (Vmax = Vb‚Ä≤)
                end
                tmp += Vmax
            end
            Œ±_a[s_idx] = reward(ùí´, s, a) + Œ≥*tmp
        end
        copyto!(Œì[a_idx], Œ±_a)
    end
    return Œì
end

function POMDPs.solve(sol::FastInformedBound, pomdp::POMDP)
    t0 = time()
    S = ordered_states(pomdp)
    A = ordered_actions(pomdp)
    O = ordered_observations(pomdp)
    Œ≥ = discount(pomdp)

    init_value = sol.init_value
    Œì = if isfinite(sol.init_value)
        [fill(sol.init_value, length(S)) for a in A]
    else
        r_max = maximum(reward(pomdp, s, a) for a ‚àà actions(pomdp), s ‚àà states(pomdp))
        VÃÑ = r_max/(1-Œ≥)
        [fill(VÃÑ, length(S)) for a in A]
    end
    resize!(sol.Œ±_tmp, length(S))

    iter = 0
    while iter < sol.max_iter && time() - t0 < sol.max_time
        update!(pomdp, sol, Œì, S, A, O)
        iter += 1
    end

    # return AlphaVectorPolicy(pomdp, Œì, A)
    return Œì
end
